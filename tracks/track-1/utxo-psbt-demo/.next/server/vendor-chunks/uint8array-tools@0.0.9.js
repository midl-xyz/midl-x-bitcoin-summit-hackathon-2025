"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uint8array-tools@0.0.9";
exports.ids = ["vendor-chunks/uint8array-tools@0.0.9"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/uint8array-tools@0.0.9/node_modules/uint8array-tools/src/mjs/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/uint8array-tools@0.0.9/node_modules/uint8array-tools/src/mjs/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   fromBase64: () => (/* binding */ fromBase64),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromUtf8: () => (/* binding */ fromUtf8),\n/* harmony export */   readInt16: () => (/* binding */ readInt16),\n/* harmony export */   readInt32: () => (/* binding */ readInt32),\n/* harmony export */   readInt64: () => (/* binding */ readInt64),\n/* harmony export */   readInt8: () => (/* binding */ readInt8),\n/* harmony export */   readUInt16: () => (/* binding */ readUInt16),\n/* harmony export */   readUInt32: () => (/* binding */ readUInt32),\n/* harmony export */   readUInt64: () => (/* binding */ readUInt64),\n/* harmony export */   readUInt8: () => (/* binding */ readUInt8),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toUtf8: () => (/* binding */ toUtf8),\n/* harmony export */   writeInt16: () => (/* binding */ writeInt16),\n/* harmony export */   writeInt32: () => (/* binding */ writeInt32),\n/* harmony export */   writeInt64: () => (/* binding */ writeInt64),\n/* harmony export */   writeInt8: () => (/* binding */ writeInt8),\n/* harmony export */   writeUInt16: () => (/* binding */ writeUInt16),\n/* harmony export */   writeUInt32: () => (/* binding */ writeUInt32),\n/* harmony export */   writeUInt64: () => (/* binding */ writeUInt64),\n/* harmony export */   writeUInt8: () => (/* binding */ writeUInt8)\n/* harmony export */ });\nfunction toUtf8(bytes) {\n    return Buffer.from(bytes || []).toString();\n}\nfunction fromUtf8(s) {\n    return Uint8Array.from(Buffer.from(s || \"\", \"utf8\"));\n}\nfunction concat(arrays) {\n    return Uint8Array.from(Buffer.concat(arrays));\n}\nfunction toHex(bytes) {\n    return Buffer.from(bytes || []).toString(\"hex\");\n}\nfunction fromHex(hexString) {\n    return Uint8Array.from(Buffer.from(hexString || \"\", \"hex\"));\n}\nfunction toBase64(bytes) {\n    return Buffer.from(bytes).toString(\"base64\");\n}\nfunction fromBase64(base64) {\n    return Uint8Array.from(Buffer.from(base64 || \"\", \"base64\"));\n}\nfunction compare(v1, v2) {\n    return Buffer.from(v1).compare(Buffer.from(v2));\n}\nfunction writeUInt8(buffer, offset, value) {\n    if (offset + 1 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    const buf = Buffer.alloc(1);\n    buf.writeUInt8(value, 0);\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 1;\n}\nfunction writeUInt16(buffer, offset, value, littleEndian) {\n    if (offset + 2 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.alloc(2);\n    if (littleEndian === \"LE\") {\n        buf.writeUInt16LE(value, 0);\n    }\n    else {\n        buf.writeUInt16BE(value, 0);\n    }\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 2;\n}\nfunction writeUInt32(buffer, offset, value, littleEndian) {\n    if (offset + 4 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.alloc(4);\n    if (littleEndian === \"LE\") {\n        buf.writeUInt32LE(value, 0);\n    }\n    else {\n        buf.writeUInt32BE(value, 0);\n    }\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 4;\n}\nfunction writeUInt64(buffer, offset, value, littleEndian) {\n    if (offset + 8 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.alloc(8);\n    if (value > 0xffffffffffffffffn) {\n        throw new Error(`The value of \"value\" is out of range. It must be >= 0 and <= ${0xffffffffffffffffn}. Received ${value}`);\n    }\n    if (littleEndian === \"LE\") {\n        buf.writeBigUInt64LE(value, 0);\n    }\n    else {\n        buf.writeBigUInt64BE(value, 0);\n    }\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 8;\n}\nfunction readUInt8(buffer, offset) {\n    if (offset + 1 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    const buf = Buffer.from(buffer);\n    return buf.readUInt8(offset);\n}\nfunction readUInt16(buffer, offset, littleEndian) {\n    if (offset + 2 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.from(buffer);\n    if (littleEndian === \"LE\") {\n        return buf.readUInt16LE(offset);\n    }\n    else {\n        return buf.readUInt16BE(offset);\n    }\n}\nfunction readUInt32(buffer, offset, littleEndian) {\n    if (offset + 4 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.from(buffer);\n    if (littleEndian === \"LE\") {\n        return buf.readUInt32LE(offset);\n    }\n    else {\n        return buf.readUInt32BE(offset);\n    }\n}\nfunction readUInt64(buffer, offset, littleEndian) {\n    if (offset + 8 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.from(buffer);\n    if (littleEndian === \"LE\") {\n        return buf.readBigUInt64LE(offset);\n    }\n    else {\n        return buf.readBigUInt64BE(offset);\n    }\n}\nfunction writeInt8(buffer, offset, value) {\n    if (offset + 1 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    const buf = Buffer.alloc(1);\n    buf.writeInt8(value, 0);\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 1;\n}\nfunction writeInt16(buffer, offset, value, littleEndian) {\n    if (offset + 2 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.alloc(2);\n    if (littleEndian === \"LE\") {\n        buf.writeInt16LE(value, 0);\n    }\n    else {\n        buf.writeInt16BE(value, 0);\n    }\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 2;\n}\nfunction writeInt32(buffer, offset, value, littleEndian) {\n    if (offset + 4 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.alloc(4);\n    if (littleEndian === \"LE\") {\n        buf.writeInt32LE(value, 0);\n    }\n    else {\n        buf.writeInt32BE(value, 0);\n    }\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 4;\n}\nfunction writeInt64(buffer, offset, value, littleEndian) {\n    if (offset + 8 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    if (value > 0x7fffffffffffffffn || value < -0x8000000000000000n) {\n        throw new Error(`The value of \"value\" is out of range. It must be >= ${-0x8000000000000000n} and <= ${0x7fffffffffffffffn}. Received ${value}`);\n    }\n    littleEndian = littleEndian.toUpperCase();\n    const buf = Buffer.alloc(8);\n    if (littleEndian === \"LE\") {\n        buf.writeBigInt64LE(value, 0);\n    }\n    else {\n        buf.writeBigInt64BE(value, 0);\n    }\n    buffer.set(Uint8Array.from(buf), offset);\n    return offset + 8;\n}\nfunction readInt8(buffer, offset) {\n    if (offset + 1 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    const buf = Buffer.from(buffer);\n    return buf.readInt8(offset);\n}\nfunction readInt16(buffer, offset, littleEndian) {\n    if (offset + 2 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    if (littleEndian === \"LE\") {\n        return Buffer.from(buffer).readInt16LE(offset);\n    }\n    else {\n        return Buffer.from(buffer).readInt16BE(offset);\n    }\n}\nfunction readInt32(buffer, offset, littleEndian) {\n    if (offset + 4 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    if (littleEndian === \"LE\") {\n        return Buffer.from(buffer).readInt32LE(offset);\n    }\n    else {\n        return Buffer.from(buffer).readInt32BE(offset);\n    }\n}\nfunction readInt64(buffer, offset, littleEndian) {\n    if (offset + 8 > buffer.length) {\n        throw new Error(\"Offset is outside the bounds of Uint8Array\");\n    }\n    littleEndian = littleEndian.toUpperCase();\n    if (littleEndian === \"LE\") {\n        return Buffer.from(buffer).readBigInt64LE(offset);\n    }\n    else {\n        return Buffer.from(buffer).readBigInt64BE(offset);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/uint8array-tools@0.0.9/node_modules/uint8array-tools/src/mjs/index.js\n");

/***/ })

};
;