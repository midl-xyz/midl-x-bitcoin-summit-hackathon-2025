"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/providers/MempoolSpaceProvider.ts":
/*!***********************************************!*\
  !*** ./app/providers/MempoolSpaceProvider.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomMempoolSpaceProvider: () => (/* binding */ CustomMempoolSpaceProvider),\n/* harmony export */   mempoolSpaceRPC: () => (/* binding */ mempoolSpaceRPC)\n/* harmony export */ });\nconst mempoolSpaceRPC = {\n    mainnet: \"https://mempool.space\",\n    testnet: \"https://mempool.space/testnet\",\n    testnet4: \"https://mempool.space/testnet4\",\n    regtest: \"https://mempool.regtest.midl.xyz\",\n    signet: \"https://mempool.space/signet\"\n};\nclass CustomMempoolSpaceProvider {\n    async broadcastTransaction(network, txHex) {\n        const url = \"\".concat(this.getApURL(network), \"/tx\");\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"text/plain\"\n            },\n            body: txHex\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to broadcast transaction: \".concat(response.statusText));\n        }\n        return response.text();\n    }\n    async getLatestBlockHeight(network) {\n        const url = \"\".concat(this.getApURL(network), \"/blocks/tip/height\");\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch block height: \".concat(response.statusText));\n        }\n        const blockHeight = await response.json();\n        return blockHeight;\n    }\n    async getFeeRate(network) {\n        const url = \"\".concat(this.getApURL(network), \"/v1/fees/recommended\");\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch fee rate: \".concat(response.statusText));\n        }\n        const feeRate = await response.json();\n        return feeRate;\n    }\n    async getRune(network, runeId) {\n        const url = \"\".concat(this.getApURL(network), \"/runes/v1/etchings/\").concat(runeId);\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch rune: \".concat(response.statusText));\n        }\n        const rune = await response.json();\n        return rune;\n    }\n    async getRuneBalance(network, address, runeId) {\n        const url = \"\".concat(this.getApURL(network), \"/runes/v1/etchings/\").concat(runeId, \"/holders/\").concat(address);\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch rune balance: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data;\n    }\n    async getRunes(network, address) {\n        let { limit, offset } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {\n            limit: 20,\n            offset: 0\n        };\n        const url = \"\".concat(this.getApURL(network), \"/runes/v1/addresses/\").concat(address, \"/balances?limit=\").concat(limit, \"&offset=\").concat(offset);\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch runes: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data;\n    }\n    async getRuneUTXOs(network, address, runeId) {\n        const url = \"\".concat(this.getApURL(network), \"/utxos/\").concat(address, \"?runeId=\").concat(runeId);\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch rune UTXOs: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data;\n    }\n    async getTransactionStatus(network, txid) {\n        const url = \"\".concat(this.getApURL(network), \"/tx/\").concat(txid, \"/status\");\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch transaction status: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data;\n    }\n    async getTransactionHex(network, txid) {\n        const url = \"\".concat(this.getApURL(network), \"/tx/\").concat(txid, \"/hex\");\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch transaction hex: \".concat(response.statusText));\n        }\n        const data = await response.text();\n        return data;\n    }\n    async getUTXOs(network, address) {\n        const url = \"\".concat(this.getApURL(network), \"/address/\").concat(address, \"/utxo\");\n        console.log(\"url\", url);\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch UTXOs: \".concat(response.statusText));\n        }\n        const utxos = await response.json();\n        return utxos;\n    }\n    getApURL(network) {\n        return this.rpcUrlMap[network.id] || this.rpcUrlMap.mainnet;\n    }\n    constructor(rpcUrlMap = mempoolSpaceRPC){\n        this.rpcUrlMap = rpcUrlMap;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/providers/MempoolSpaceProvider.ts\n"));

/***/ })

});